// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ftrl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ftrl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ftrl {

namespace {

const ::google::protobuf::Descriptor* AdvertisementRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvertisementRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvertisementResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvertisementResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvertisementFeedback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvertisementFeedback_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ftrl_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ftrl_2eproto() {
  protobuf_AddDesc_ftrl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ftrl.proto");
  GOOGLE_CHECK(file != NULL);
  AdvertisementRequest_descriptor_ = file->message_type(0);
  static const int AdvertisementRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvertisementRequest, user_id_),
  };
  AdvertisementRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdvertisementRequest_descriptor_,
      AdvertisementRequest::default_instance_,
      AdvertisementRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdvertisementRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvertisementRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvertisementRequest, _is_default_instance_));
  AdvertisementResult_descriptor_ = file->message_type(1);
  static const int AdvertisementResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvertisementResult, ad_id_),
  };
  AdvertisementResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdvertisementResult_descriptor_,
      AdvertisementResult::default_instance_,
      AdvertisementResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdvertisementResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvertisementResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvertisementResult, _is_default_instance_));
  AdvertisementFeedback_descriptor_ = file->message_type(2);
  static const int AdvertisementFeedback_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvertisementFeedback, ad_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvertisementFeedback, feedback_),
  };
  AdvertisementFeedback_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdvertisementFeedback_descriptor_,
      AdvertisementFeedback::default_instance_,
      AdvertisementFeedback_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdvertisementFeedback),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvertisementFeedback, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvertisementFeedback, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ftrl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdvertisementRequest_descriptor_, &AdvertisementRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdvertisementResult_descriptor_, &AdvertisementResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdvertisementFeedback_descriptor_, &AdvertisementFeedback::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ftrl_2eproto() {
  delete AdvertisementRequest::default_instance_;
  delete AdvertisementRequest_reflection_;
  delete AdvertisementResult::default_instance_;
  delete AdvertisementResult_reflection_;
  delete AdvertisementFeedback::default_instance_;
  delete AdvertisementFeedback_reflection_;
}

void protobuf_AddDesc_ftrl_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ftrl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fwrappers_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fempty_2eproto();
  ::phxrpc::protobuf_AddDesc_phxrpc_2frpc_2fphxrpc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nftrl.proto\022\004ftrl\032\036google/protobuf/wrap"
    "pers.proto\032\033google/protobuf/empty.proto\032"
    "\027phxrpc/rpc/phxrpc.proto\"\'\n\024Advertisemen"
    "tRequest\022\017\n\007user_id\030\001 \001(\003\"$\n\023Advertiseme"
    "ntResult\022\r\n\005ad_id\030\001 \001(\003\"8\n\025Advertisement"
    "Feedback\022\r\n\005ad_id\030\001 \001(\003\022\020\n\010feedback\030\002 \001("
    "\0102\362\001\n\rAdvertisement\022e\n\rAdvertisement\022\032.f"
    "trl.AdvertisementRequest\032\031.ftrl.Advertis"
    "ementResult\"\035\200\310\320\007\001\212\310\320\007\002u:\222\310\320\007\014-u <user_i"
    "d>\022z\n\010Feedback\022\033.ftrl.AdvertisementFeedb"
    "ack\032\026.google.protobuf.Empty\"9\200\310\320\007\002\212\310\320\007\006a"
    "d: f:\222\310\320\007$-ad <advertisement_id> -f <fee"
    "dback>b\006proto3", 494);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ftrl.proto", &protobuf_RegisterTypes);
  AdvertisementRequest::default_instance_ = new AdvertisementRequest();
  AdvertisementResult::default_instance_ = new AdvertisementResult();
  AdvertisementFeedback::default_instance_ = new AdvertisementFeedback();
  AdvertisementRequest::default_instance_->InitAsDefaultInstance();
  AdvertisementResult::default_instance_->InitAsDefaultInstance();
  AdvertisementFeedback::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ftrl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ftrl_2eproto {
  StaticDescriptorInitializer_ftrl_2eproto() {
    protobuf_AddDesc_ftrl_2eproto();
  }
} static_descriptor_initializer_ftrl_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdvertisementRequest::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdvertisementRequest::AdvertisementRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ftrl.AdvertisementRequest)
}

void AdvertisementRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AdvertisementRequest::AdvertisementRequest(const AdvertisementRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ftrl.AdvertisementRequest)
}

void AdvertisementRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
}

AdvertisementRequest::~AdvertisementRequest() {
  // @@protoc_insertion_point(destructor:ftrl.AdvertisementRequest)
  SharedDtor();
}

void AdvertisementRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdvertisementRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvertisementRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvertisementRequest_descriptor_;
}

const AdvertisementRequest& AdvertisementRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ftrl_2eproto();
  return *default_instance_;
}

AdvertisementRequest* AdvertisementRequest::default_instance_ = NULL;

AdvertisementRequest* AdvertisementRequest::New(::google::protobuf::Arena* arena) const {
  AdvertisementRequest* n = new AdvertisementRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdvertisementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ftrl.AdvertisementRequest)
  user_id_ = GOOGLE_LONGLONG(0);
}

bool AdvertisementRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ftrl.AdvertisementRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ftrl.AdvertisementRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ftrl.AdvertisementRequest)
  return false;
#undef DO_
}

void AdvertisementRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ftrl.AdvertisementRequest)
  // optional int64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:ftrl.AdvertisementRequest)
}

::google::protobuf::uint8* AdvertisementRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ftrl.AdvertisementRequest)
  // optional int64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ftrl.AdvertisementRequest)
  return target;
}

int AdvertisementRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ftrl.AdvertisementRequest)
  int total_size = 0;

  // optional int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvertisementRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ftrl.AdvertisementRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AdvertisementRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AdvertisementRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ftrl.AdvertisementRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ftrl.AdvertisementRequest)
    MergeFrom(*source);
  }
}

void AdvertisementRequest::MergeFrom(const AdvertisementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ftrl.AdvertisementRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void AdvertisementRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ftrl.AdvertisementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvertisementRequest::CopyFrom(const AdvertisementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ftrl.AdvertisementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvertisementRequest::IsInitialized() const {

  return true;
}

void AdvertisementRequest::Swap(AdvertisementRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdvertisementRequest::InternalSwap(AdvertisementRequest* other) {
  std::swap(user_id_, other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdvertisementRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvertisementRequest_descriptor_;
  metadata.reflection = AdvertisementRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdvertisementRequest

// optional int64 user_id = 1;
void AdvertisementRequest::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AdvertisementRequest::user_id() const {
  // @@protoc_insertion_point(field_get:ftrl.AdvertisementRequest.user_id)
  return user_id_;
}
 void AdvertisementRequest::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ftrl.AdvertisementRequest.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdvertisementResult::kAdIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdvertisementResult::AdvertisementResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ftrl.AdvertisementResult)
}

void AdvertisementResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AdvertisementResult::AdvertisementResult(const AdvertisementResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ftrl.AdvertisementResult)
}

void AdvertisementResult::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  ad_id_ = GOOGLE_LONGLONG(0);
}

AdvertisementResult::~AdvertisementResult() {
  // @@protoc_insertion_point(destructor:ftrl.AdvertisementResult)
  SharedDtor();
}

void AdvertisementResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdvertisementResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvertisementResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvertisementResult_descriptor_;
}

const AdvertisementResult& AdvertisementResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ftrl_2eproto();
  return *default_instance_;
}

AdvertisementResult* AdvertisementResult::default_instance_ = NULL;

AdvertisementResult* AdvertisementResult::New(::google::protobuf::Arena* arena) const {
  AdvertisementResult* n = new AdvertisementResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdvertisementResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ftrl.AdvertisementResult)
  ad_id_ = GOOGLE_LONGLONG(0);
}

bool AdvertisementResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ftrl.AdvertisementResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ad_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ad_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ftrl.AdvertisementResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ftrl.AdvertisementResult)
  return false;
#undef DO_
}

void AdvertisementResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ftrl.AdvertisementResult)
  // optional int64 ad_id = 1;
  if (this->ad_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ad_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:ftrl.AdvertisementResult)
}

::google::protobuf::uint8* AdvertisementResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ftrl.AdvertisementResult)
  // optional int64 ad_id = 1;
  if (this->ad_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ad_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ftrl.AdvertisementResult)
  return target;
}

int AdvertisementResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ftrl.AdvertisementResult)
  int total_size = 0;

  // optional int64 ad_id = 1;
  if (this->ad_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ad_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvertisementResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ftrl.AdvertisementResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AdvertisementResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AdvertisementResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ftrl.AdvertisementResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ftrl.AdvertisementResult)
    MergeFrom(*source);
  }
}

void AdvertisementResult::MergeFrom(const AdvertisementResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ftrl.AdvertisementResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.ad_id() != 0) {
    set_ad_id(from.ad_id());
  }
}

void AdvertisementResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ftrl.AdvertisementResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvertisementResult::CopyFrom(const AdvertisementResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ftrl.AdvertisementResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvertisementResult::IsInitialized() const {

  return true;
}

void AdvertisementResult::Swap(AdvertisementResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdvertisementResult::InternalSwap(AdvertisementResult* other) {
  std::swap(ad_id_, other->ad_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdvertisementResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvertisementResult_descriptor_;
  metadata.reflection = AdvertisementResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdvertisementResult

// optional int64 ad_id = 1;
void AdvertisementResult::clear_ad_id() {
  ad_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AdvertisementResult::ad_id() const {
  // @@protoc_insertion_point(field_get:ftrl.AdvertisementResult.ad_id)
  return ad_id_;
}
 void AdvertisementResult::set_ad_id(::google::protobuf::int64 value) {
  
  ad_id_ = value;
  // @@protoc_insertion_point(field_set:ftrl.AdvertisementResult.ad_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdvertisementFeedback::kAdIdFieldNumber;
const int AdvertisementFeedback::kFeedbackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdvertisementFeedback::AdvertisementFeedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ftrl.AdvertisementFeedback)
}

void AdvertisementFeedback::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AdvertisementFeedback::AdvertisementFeedback(const AdvertisementFeedback& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ftrl.AdvertisementFeedback)
}

void AdvertisementFeedback::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  ad_id_ = GOOGLE_LONGLONG(0);
  feedback_ = false;
}

AdvertisementFeedback::~AdvertisementFeedback() {
  // @@protoc_insertion_point(destructor:ftrl.AdvertisementFeedback)
  SharedDtor();
}

void AdvertisementFeedback::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdvertisementFeedback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvertisementFeedback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvertisementFeedback_descriptor_;
}

const AdvertisementFeedback& AdvertisementFeedback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ftrl_2eproto();
  return *default_instance_;
}

AdvertisementFeedback* AdvertisementFeedback::default_instance_ = NULL;

AdvertisementFeedback* AdvertisementFeedback::New(::google::protobuf::Arena* arena) const {
  AdvertisementFeedback* n = new AdvertisementFeedback;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdvertisementFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:ftrl.AdvertisementFeedback)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AdvertisementFeedback, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AdvertisementFeedback*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ad_id_, feedback_);

#undef ZR_HELPER_
#undef ZR_

}

bool AdvertisementFeedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ftrl.AdvertisementFeedback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ad_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ad_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_feedback;
        break;
      }

      // optional bool feedback = 2;
      case 2: {
        if (tag == 16) {
         parse_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feedback_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ftrl.AdvertisementFeedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ftrl.AdvertisementFeedback)
  return false;
#undef DO_
}

void AdvertisementFeedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ftrl.AdvertisementFeedback)
  // optional int64 ad_id = 1;
  if (this->ad_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ad_id(), output);
  }

  // optional bool feedback = 2;
  if (this->feedback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->feedback(), output);
  }

  // @@protoc_insertion_point(serialize_end:ftrl.AdvertisementFeedback)
}

::google::protobuf::uint8* AdvertisementFeedback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ftrl.AdvertisementFeedback)
  // optional int64 ad_id = 1;
  if (this->ad_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ad_id(), target);
  }

  // optional bool feedback = 2;
  if (this->feedback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->feedback(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ftrl.AdvertisementFeedback)
  return target;
}

int AdvertisementFeedback::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ftrl.AdvertisementFeedback)
  int total_size = 0;

  // optional int64 ad_id = 1;
  if (this->ad_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ad_id());
  }

  // optional bool feedback = 2;
  if (this->feedback() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvertisementFeedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ftrl.AdvertisementFeedback)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AdvertisementFeedback* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AdvertisementFeedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ftrl.AdvertisementFeedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ftrl.AdvertisementFeedback)
    MergeFrom(*source);
  }
}

void AdvertisementFeedback::MergeFrom(const AdvertisementFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ftrl.AdvertisementFeedback)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.ad_id() != 0) {
    set_ad_id(from.ad_id());
  }
  if (from.feedback() != 0) {
    set_feedback(from.feedback());
  }
}

void AdvertisementFeedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ftrl.AdvertisementFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvertisementFeedback::CopyFrom(const AdvertisementFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ftrl.AdvertisementFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvertisementFeedback::IsInitialized() const {

  return true;
}

void AdvertisementFeedback::Swap(AdvertisementFeedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdvertisementFeedback::InternalSwap(AdvertisementFeedback* other) {
  std::swap(ad_id_, other->ad_id_);
  std::swap(feedback_, other->feedback_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdvertisementFeedback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvertisementFeedback_descriptor_;
  metadata.reflection = AdvertisementFeedback_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdvertisementFeedback

// optional int64 ad_id = 1;
void AdvertisementFeedback::clear_ad_id() {
  ad_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AdvertisementFeedback::ad_id() const {
  // @@protoc_insertion_point(field_get:ftrl.AdvertisementFeedback.ad_id)
  return ad_id_;
}
 void AdvertisementFeedback::set_ad_id(::google::protobuf::int64 value) {
  
  ad_id_ = value;
  // @@protoc_insertion_point(field_set:ftrl.AdvertisementFeedback.ad_id)
}

// optional bool feedback = 2;
void AdvertisementFeedback::clear_feedback() {
  feedback_ = false;
}
 bool AdvertisementFeedback::feedback() const {
  // @@protoc_insertion_point(field_get:ftrl.AdvertisementFeedback.feedback)
  return feedback_;
}
 void AdvertisementFeedback::set_feedback(bool value) {
  
  feedback_ = value;
  // @@protoc_insertion_point(field_set:ftrl.AdvertisementFeedback.feedback)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ftrl

// @@protoc_insertion_point(global_scope)
