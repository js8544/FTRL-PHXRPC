// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ftrl.proto

#include "ftrl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace ftrl {
class AdvertisementRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdvertisementRequest> _instance;
} _AdvertisementRequest_default_instance_;
class AdvertisementResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdvertisementResult> _instance;
} _AdvertisementResult_default_instance_;
class AdvertisementFeedbackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdvertisementFeedback> _instance;
} _AdvertisementFeedback_default_instance_;
}  // namespace ftrl
static void InitDefaultsscc_info_AdvertisementFeedback_ftrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ftrl::_AdvertisementFeedback_default_instance_;
    new (ptr) ::ftrl::AdvertisementFeedback();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ftrl::AdvertisementFeedback::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdvertisementFeedback_ftrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AdvertisementFeedback_ftrl_2eproto}, {}};

static void InitDefaultsscc_info_AdvertisementRequest_ftrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ftrl::_AdvertisementRequest_default_instance_;
    new (ptr) ::ftrl::AdvertisementRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ftrl::AdvertisementRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdvertisementRequest_ftrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AdvertisementRequest_ftrl_2eproto}, {}};

static void InitDefaultsscc_info_AdvertisementResult_ftrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ftrl::_AdvertisementResult_default_instance_;
    new (ptr) ::ftrl::AdvertisementResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ftrl::AdvertisementResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdvertisementResult_ftrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AdvertisementResult_ftrl_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ftrl_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ftrl_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ftrl_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ftrl_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ftrl::AdvertisementRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ftrl::AdvertisementRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ftrl::AdvertisementResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ftrl::AdvertisementResult, ad_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ftrl::AdvertisementFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ftrl::AdvertisementFeedback, user_id_),
  PROTOBUF_FIELD_OFFSET(::ftrl::AdvertisementFeedback, ad_id_),
  PROTOBUF_FIELD_OFFSET(::ftrl::AdvertisementFeedback, feedback_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ftrl::AdvertisementRequest)},
  { 6, -1, sizeof(::ftrl::AdvertisementResult)},
  { 12, -1, sizeof(::ftrl::AdvertisementFeedback)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ftrl::_AdvertisementRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ftrl::_AdvertisementResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ftrl::_AdvertisementFeedback_default_instance_),
};

const char descriptor_table_protodef_ftrl_2eproto[] =
  "\n\nftrl.proto\022\004ftrl\032\036google/protobuf/wrap"
  "pers.proto\032\033google/protobuf/empty.proto\032"
  "\027phxrpc/rpc/phxrpc.proto\"\'\n\024Advertisemen"
  "tRequest\022\017\n\007user_id\030\001 \001(\003\"$\n\023Advertiseme"
  "ntResult\022\r\n\005ad_id\030\001 \001(\003\"I\n\025Advertisement"
  "Feedback\022\017\n\007user_id\030\001 \001(\003\022\r\n\005ad_id\030\002 \001(\003"
  "\022\020\n\010feedback\030\003 \001(\0102\362\001\n\rAdvertisement\022e\n\r"
  "Advertisement\022\032.ftrl.AdvertisementReques"
  "t\032\031.ftrl.AdvertisementResult\"\035\200\310\320\007\001\212\310\320\007\002"
  "u:\222\310\320\007\014-u <user_id>\022z\n\010Feedback\022\033.ftrl.A"
  "dvertisementFeedback\032\026.google.protobuf.E"
  "mpty\"9\200\310\320\007\002\212\310\320\007\006ad: f:\222\310\320\007$-ad <advertis"
  "ement_id> -f <feedback>b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ftrl_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_phxrpc_2frpc_2fphxrpc_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ftrl_2eproto_sccs[3] = {
  &scc_info_AdvertisementFeedback_ftrl_2eproto.base,
  &scc_info_AdvertisementRequest_ftrl_2eproto.base,
  &scc_info_AdvertisementResult_ftrl_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ftrl_2eproto_once;
static bool descriptor_table_ftrl_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ftrl_2eproto = {
  &descriptor_table_ftrl_2eproto_initialized, descriptor_table_protodef_ftrl_2eproto, "ftrl.proto", 511,
  &descriptor_table_ftrl_2eproto_once, descriptor_table_ftrl_2eproto_sccs, descriptor_table_ftrl_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_ftrl_2eproto::offsets,
  file_level_metadata_ftrl_2eproto, 3, file_level_enum_descriptors_ftrl_2eproto, file_level_service_descriptors_ftrl_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ftrl_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ftrl_2eproto), true);
namespace ftrl {

// ===================================================================

void AdvertisementRequest::InitAsDefaultInstance() {
}
class AdvertisementRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdvertisementRequest::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdvertisementRequest::AdvertisementRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ftrl.AdvertisementRequest)
}
AdvertisementRequest::AdvertisementRequest(const AdvertisementRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:ftrl.AdvertisementRequest)
}

void AdvertisementRequest::SharedCtor() {
  user_id_ = PROTOBUF_LONGLONG(0);
}

AdvertisementRequest::~AdvertisementRequest() {
  // @@protoc_insertion_point(destructor:ftrl.AdvertisementRequest)
  SharedDtor();
}

void AdvertisementRequest::SharedDtor() {
}

void AdvertisementRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdvertisementRequest& AdvertisementRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdvertisementRequest_ftrl_2eproto.base);
  return *internal_default_instance();
}


void AdvertisementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ftrl.AdvertisementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdvertisementRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdvertisementRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ftrl.AdvertisementRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 user_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ftrl.AdvertisementRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ftrl.AdvertisementRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdvertisementRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ftrl.AdvertisementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ftrl.AdvertisementRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* AdvertisementRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ftrl.AdvertisementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ftrl.AdvertisementRequest)
  return target;
}

size_t AdvertisementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ftrl.AdvertisementRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdvertisementRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ftrl.AdvertisementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AdvertisementRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdvertisementRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ftrl.AdvertisementRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ftrl.AdvertisementRequest)
    MergeFrom(*source);
  }
}

void AdvertisementRequest::MergeFrom(const AdvertisementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ftrl.AdvertisementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void AdvertisementRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ftrl.AdvertisementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvertisementRequest::CopyFrom(const AdvertisementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ftrl.AdvertisementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvertisementRequest::IsInitialized() const {
  return true;
}

void AdvertisementRequest::Swap(AdvertisementRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdvertisementRequest::InternalSwap(AdvertisementRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdvertisementRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdvertisementResult::InitAsDefaultInstance() {
}
class AdvertisementResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdvertisementResult::kAdIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdvertisementResult::AdvertisementResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ftrl.AdvertisementResult)
}
AdvertisementResult::AdvertisementResult(const AdvertisementResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ad_id_ = from.ad_id_;
  // @@protoc_insertion_point(copy_constructor:ftrl.AdvertisementResult)
}

void AdvertisementResult::SharedCtor() {
  ad_id_ = PROTOBUF_LONGLONG(0);
}

AdvertisementResult::~AdvertisementResult() {
  // @@protoc_insertion_point(destructor:ftrl.AdvertisementResult)
  SharedDtor();
}

void AdvertisementResult::SharedDtor() {
}

void AdvertisementResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdvertisementResult& AdvertisementResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdvertisementResult_ftrl_2eproto.base);
  return *internal_default_instance();
}


void AdvertisementResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ftrl.AdvertisementResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ad_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdvertisementResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 ad_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ad_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdvertisementResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ftrl.AdvertisementResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 ad_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ad_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ftrl.AdvertisementResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ftrl.AdvertisementResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdvertisementResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ftrl.AdvertisementResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ad_id = 1;
  if (this->ad_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->ad_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ftrl.AdvertisementResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* AdvertisementResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ftrl.AdvertisementResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ad_id = 1;
  if (this->ad_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->ad_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ftrl.AdvertisementResult)
  return target;
}

size_t AdvertisementResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ftrl.AdvertisementResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ad_id = 1;
  if (this->ad_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->ad_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdvertisementResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ftrl.AdvertisementResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AdvertisementResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdvertisementResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ftrl.AdvertisementResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ftrl.AdvertisementResult)
    MergeFrom(*source);
  }
}

void AdvertisementResult::MergeFrom(const AdvertisementResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ftrl.AdvertisementResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ad_id() != 0) {
    set_ad_id(from.ad_id());
  }
}

void AdvertisementResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ftrl.AdvertisementResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvertisementResult::CopyFrom(const AdvertisementResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ftrl.AdvertisementResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvertisementResult::IsInitialized() const {
  return true;
}

void AdvertisementResult::Swap(AdvertisementResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdvertisementResult::InternalSwap(AdvertisementResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ad_id_, other->ad_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdvertisementResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdvertisementFeedback::InitAsDefaultInstance() {
}
class AdvertisementFeedback::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdvertisementFeedback::kUserIdFieldNumber;
const int AdvertisementFeedback::kAdIdFieldNumber;
const int AdvertisementFeedback::kFeedbackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdvertisementFeedback::AdvertisementFeedback()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ftrl.AdvertisementFeedback)
}
AdvertisementFeedback::AdvertisementFeedback(const AdvertisementFeedback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&feedback_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(feedback_));
  // @@protoc_insertion_point(copy_constructor:ftrl.AdvertisementFeedback)
}

void AdvertisementFeedback::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&feedback_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(feedback_));
}

AdvertisementFeedback::~AdvertisementFeedback() {
  // @@protoc_insertion_point(destructor:ftrl.AdvertisementFeedback)
  SharedDtor();
}

void AdvertisementFeedback::SharedDtor() {
}

void AdvertisementFeedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdvertisementFeedback& AdvertisementFeedback::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdvertisementFeedback_ftrl_2eproto.base);
  return *internal_default_instance();
}


void AdvertisementFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:ftrl.AdvertisementFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&feedback_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(feedback_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdvertisementFeedback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ad_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ad_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool feedback = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdvertisementFeedback::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ftrl.AdvertisementFeedback)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 user_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ad_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ad_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool feedback = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feedback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ftrl.AdvertisementFeedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ftrl.AdvertisementFeedback)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdvertisementFeedback::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ftrl.AdvertisementFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // int64 ad_id = 2;
  if (this->ad_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->ad_id(), output);
  }

  // bool feedback = 3;
  if (this->feedback() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->feedback(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ftrl.AdvertisementFeedback)
}

::PROTOBUF_NAMESPACE_ID::uint8* AdvertisementFeedback::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ftrl.AdvertisementFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // int64 ad_id = 2;
  if (this->ad_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->ad_id(), target);
  }

  // bool feedback = 3;
  if (this->feedback() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->feedback(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ftrl.AdvertisementFeedback)
  return target;
}

size_t AdvertisementFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ftrl.AdvertisementFeedback)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  // int64 ad_id = 2;
  if (this->ad_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->ad_id());
  }

  // bool feedback = 3;
  if (this->feedback() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdvertisementFeedback::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ftrl.AdvertisementFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  const AdvertisementFeedback* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdvertisementFeedback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ftrl.AdvertisementFeedback)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ftrl.AdvertisementFeedback)
    MergeFrom(*source);
  }
}

void AdvertisementFeedback::MergeFrom(const AdvertisementFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ftrl.AdvertisementFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.ad_id() != 0) {
    set_ad_id(from.ad_id());
  }
  if (from.feedback() != 0) {
    set_feedback(from.feedback());
  }
}

void AdvertisementFeedback::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ftrl.AdvertisementFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvertisementFeedback::CopyFrom(const AdvertisementFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ftrl.AdvertisementFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvertisementFeedback::IsInitialized() const {
  return true;
}

void AdvertisementFeedback::Swap(AdvertisementFeedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdvertisementFeedback::InternalSwap(AdvertisementFeedback* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
  swap(ad_id_, other->ad_id_);
  swap(feedback_, other->feedback_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdvertisementFeedback::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ftrl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ftrl::AdvertisementRequest* Arena::CreateMaybeMessage< ::ftrl::AdvertisementRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ftrl::AdvertisementRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ftrl::AdvertisementResult* Arena::CreateMaybeMessage< ::ftrl::AdvertisementResult >(Arena* arena) {
  return Arena::CreateInternal< ::ftrl::AdvertisementResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ftrl::AdvertisementFeedback* Arena::CreateMaybeMessage< ::ftrl::AdvertisementFeedback >(Arena* arena) {
  return Arena::CreateInternal< ::ftrl::AdvertisementFeedback >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
