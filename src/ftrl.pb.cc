// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ftrl.proto

#include "ftrl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace ftrl {
class FTRLRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FTRLRequest> _instance;
} _FTRLRequest_default_instance_;
class FTRLResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FTRLResult> _instance;
} _FTRLResult_default_instance_;
class FTRLFeedbackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FTRLFeedback> _instance;
} _FTRLFeedback_default_instance_;
}  // namespace ftrl
static void InitDefaultsscc_info_FTRLFeedback_ftrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ftrl::_FTRLFeedback_default_instance_;
    new (ptr) ::ftrl::FTRLFeedback();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ftrl::FTRLFeedback::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FTRLFeedback_ftrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FTRLFeedback_ftrl_2eproto}, {}};

static void InitDefaultsscc_info_FTRLRequest_ftrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ftrl::_FTRLRequest_default_instance_;
    new (ptr) ::ftrl::FTRLRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ftrl::FTRLRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FTRLRequest_ftrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FTRLRequest_ftrl_2eproto}, {}};

static void InitDefaultsscc_info_FTRLResult_ftrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ftrl::_FTRLResult_default_instance_;
    new (ptr) ::ftrl::FTRLResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ftrl::FTRLResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FTRLResult_ftrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FTRLResult_ftrl_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ftrl_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ftrl_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ftrl_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ftrl_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ftrl::FTRLRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ftrl::FTRLRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ftrl::FTRLResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ftrl::FTRLResult, ad_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ftrl::FTRLFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ftrl::FTRLFeedback, user_id_),
  PROTOBUF_FIELD_OFFSET(::ftrl::FTRLFeedback, ad_id_),
  PROTOBUF_FIELD_OFFSET(::ftrl::FTRLFeedback, feedback_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ftrl::FTRLRequest)},
  { 6, -1, sizeof(::ftrl::FTRLResult)},
  { 12, -1, sizeof(::ftrl::FTRLFeedback)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ftrl::_FTRLRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ftrl::_FTRLResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ftrl::_FTRLFeedback_default_instance_),
};

const char descriptor_table_protodef_ftrl_2eproto[] =
  "\n\nftrl.proto\022\004ftrl\032\036google/protobuf/wrap"
  "pers.proto\032\033google/protobuf/empty.proto\032"
  "\027phxrpc/rpc/phxrpc.proto\"\036\n\013FTRLRequest\022"
  "\017\n\007user_id\030\001 \001(\003\"\033\n\nFTRLResult\022\r\n\005ad_id\030"
  "\001 \001(\003\"@\n\014FTRLFeedback\022\017\n\007user_id\030\001 \001(\003\022\r"
  "\n\005ad_id\030\002 \001(\003\022\020\n\010feedback\030\003 \001(\0102\310\001\n\004FTRL"
  "\022J\n\004FTRL\022\021.ftrl.FTRLRequest\032\020.ftrl.FTRLR"
  "esult\"\035\200\310\320\007\001\212\310\320\007\002u:\222\310\320\007\014-u <user_id>\022t\n\010"
  "Feedback\022\022.ftrl.FTRLFeedback\032\026.google.pr"
  "otobuf.Empty\"<\200\310\320\007\002\212\310\320\007\010u: a: r:\222\310\320\007%-u "
  "<user_id> -a <ad_id> -r <feedback>b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ftrl_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_phxrpc_2frpc_2fphxrpc_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ftrl_2eproto_sccs[3] = {
  &scc_info_FTRLFeedback_ftrl_2eproto.base,
  &scc_info_FTRLRequest_ftrl_2eproto.base,
  &scc_info_FTRLResult_ftrl_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ftrl_2eproto_once;
static bool descriptor_table_ftrl_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ftrl_2eproto = {
  &descriptor_table_ftrl_2eproto_initialized, descriptor_table_protodef_ftrl_2eproto, "ftrl.proto", 442,
  &descriptor_table_ftrl_2eproto_once, descriptor_table_ftrl_2eproto_sccs, descriptor_table_ftrl_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_ftrl_2eproto::offsets,
  file_level_metadata_ftrl_2eproto, 3, file_level_enum_descriptors_ftrl_2eproto, file_level_service_descriptors_ftrl_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ftrl_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ftrl_2eproto), true);
namespace ftrl {

// ===================================================================

void FTRLRequest::InitAsDefaultInstance() {
}
class FTRLRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FTRLRequest::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FTRLRequest::FTRLRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ftrl.FTRLRequest)
}
FTRLRequest::FTRLRequest(const FTRLRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:ftrl.FTRLRequest)
}

void FTRLRequest::SharedCtor() {
  user_id_ = PROTOBUF_LONGLONG(0);
}

FTRLRequest::~FTRLRequest() {
  // @@protoc_insertion_point(destructor:ftrl.FTRLRequest)
  SharedDtor();
}

void FTRLRequest::SharedDtor() {
}

void FTRLRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FTRLRequest& FTRLRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FTRLRequest_ftrl_2eproto.base);
  return *internal_default_instance();
}


void FTRLRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ftrl.FTRLRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FTRLRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FTRLRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ftrl.FTRLRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 user_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ftrl.FTRLRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ftrl.FTRLRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FTRLRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ftrl.FTRLRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ftrl.FTRLRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* FTRLRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ftrl.FTRLRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ftrl.FTRLRequest)
  return target;
}

size_t FTRLRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ftrl.FTRLRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FTRLRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ftrl.FTRLRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FTRLRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FTRLRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ftrl.FTRLRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ftrl.FTRLRequest)
    MergeFrom(*source);
  }
}

void FTRLRequest::MergeFrom(const FTRLRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ftrl.FTRLRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void FTRLRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ftrl.FTRLRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FTRLRequest::CopyFrom(const FTRLRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ftrl.FTRLRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FTRLRequest::IsInitialized() const {
  return true;
}

void FTRLRequest::Swap(FTRLRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FTRLRequest::InternalSwap(FTRLRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FTRLRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FTRLResult::InitAsDefaultInstance() {
}
class FTRLResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FTRLResult::kAdIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FTRLResult::FTRLResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ftrl.FTRLResult)
}
FTRLResult::FTRLResult(const FTRLResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ad_id_ = from.ad_id_;
  // @@protoc_insertion_point(copy_constructor:ftrl.FTRLResult)
}

void FTRLResult::SharedCtor() {
  ad_id_ = PROTOBUF_LONGLONG(0);
}

FTRLResult::~FTRLResult() {
  // @@protoc_insertion_point(destructor:ftrl.FTRLResult)
  SharedDtor();
}

void FTRLResult::SharedDtor() {
}

void FTRLResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FTRLResult& FTRLResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FTRLResult_ftrl_2eproto.base);
  return *internal_default_instance();
}


void FTRLResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ftrl.FTRLResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ad_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FTRLResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 ad_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ad_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FTRLResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ftrl.FTRLResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 ad_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ad_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ftrl.FTRLResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ftrl.FTRLResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FTRLResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ftrl.FTRLResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ad_id = 1;
  if (this->ad_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->ad_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ftrl.FTRLResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* FTRLResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ftrl.FTRLResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ad_id = 1;
  if (this->ad_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->ad_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ftrl.FTRLResult)
  return target;
}

size_t FTRLResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ftrl.FTRLResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ad_id = 1;
  if (this->ad_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->ad_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FTRLResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ftrl.FTRLResult)
  GOOGLE_DCHECK_NE(&from, this);
  const FTRLResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FTRLResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ftrl.FTRLResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ftrl.FTRLResult)
    MergeFrom(*source);
  }
}

void FTRLResult::MergeFrom(const FTRLResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ftrl.FTRLResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ad_id() != 0) {
    set_ad_id(from.ad_id());
  }
}

void FTRLResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ftrl.FTRLResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FTRLResult::CopyFrom(const FTRLResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ftrl.FTRLResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FTRLResult::IsInitialized() const {
  return true;
}

void FTRLResult::Swap(FTRLResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FTRLResult::InternalSwap(FTRLResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ad_id_, other->ad_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FTRLResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FTRLFeedback::InitAsDefaultInstance() {
}
class FTRLFeedback::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FTRLFeedback::kUserIdFieldNumber;
const int FTRLFeedback::kAdIdFieldNumber;
const int FTRLFeedback::kFeedbackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FTRLFeedback::FTRLFeedback()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ftrl.FTRLFeedback)
}
FTRLFeedback::FTRLFeedback(const FTRLFeedback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&feedback_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(feedback_));
  // @@protoc_insertion_point(copy_constructor:ftrl.FTRLFeedback)
}

void FTRLFeedback::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&feedback_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(feedback_));
}

FTRLFeedback::~FTRLFeedback() {
  // @@protoc_insertion_point(destructor:ftrl.FTRLFeedback)
  SharedDtor();
}

void FTRLFeedback::SharedDtor() {
}

void FTRLFeedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FTRLFeedback& FTRLFeedback::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FTRLFeedback_ftrl_2eproto.base);
  return *internal_default_instance();
}


void FTRLFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:ftrl.FTRLFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&feedback_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(feedback_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FTRLFeedback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ad_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ad_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool feedback = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FTRLFeedback::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ftrl.FTRLFeedback)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 user_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ad_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ad_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool feedback = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feedback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ftrl.FTRLFeedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ftrl.FTRLFeedback)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FTRLFeedback::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ftrl.FTRLFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // int64 ad_id = 2;
  if (this->ad_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->ad_id(), output);
  }

  // bool feedback = 3;
  if (this->feedback() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->feedback(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ftrl.FTRLFeedback)
}

::PROTOBUF_NAMESPACE_ID::uint8* FTRLFeedback::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ftrl.FTRLFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // int64 ad_id = 2;
  if (this->ad_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->ad_id(), target);
  }

  // bool feedback = 3;
  if (this->feedback() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->feedback(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ftrl.FTRLFeedback)
  return target;
}

size_t FTRLFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ftrl.FTRLFeedback)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  // int64 ad_id = 2;
  if (this->ad_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->ad_id());
  }

  // bool feedback = 3;
  if (this->feedback() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FTRLFeedback::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ftrl.FTRLFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  const FTRLFeedback* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FTRLFeedback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ftrl.FTRLFeedback)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ftrl.FTRLFeedback)
    MergeFrom(*source);
  }
}

void FTRLFeedback::MergeFrom(const FTRLFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ftrl.FTRLFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.ad_id() != 0) {
    set_ad_id(from.ad_id());
  }
  if (from.feedback() != 0) {
    set_feedback(from.feedback());
  }
}

void FTRLFeedback::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ftrl.FTRLFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FTRLFeedback::CopyFrom(const FTRLFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ftrl.FTRLFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FTRLFeedback::IsInitialized() const {
  return true;
}

void FTRLFeedback::Swap(FTRLFeedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FTRLFeedback::InternalSwap(FTRLFeedback* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
  swap(ad_id_, other->ad_id_);
  swap(feedback_, other->feedback_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FTRLFeedback::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ftrl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ftrl::FTRLRequest* Arena::CreateMaybeMessage< ::ftrl::FTRLRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ftrl::FTRLRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ftrl::FTRLResult* Arena::CreateMaybeMessage< ::ftrl::FTRLResult >(Arena* arena) {
  return Arena::CreateInternal< ::ftrl::FTRLResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ftrl::FTRLFeedback* Arena::CreateMaybeMessage< ::ftrl::FTRLFeedback >(Arena* arena) {
  return Arena::CreateInternal< ::ftrl::FTRLFeedback >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
