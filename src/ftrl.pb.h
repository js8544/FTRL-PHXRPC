// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ftrl.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ftrl_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ftrl_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include <google/protobuf/empty.pb.h>
#include "phxrpc/rpc/phxrpc.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ftrl_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ftrl_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ftrl_2eproto;
namespace ftrl {
class FTRLFeedback;
class FTRLFeedbackDefaultTypeInternal;
extern FTRLFeedbackDefaultTypeInternal _FTRLFeedback_default_instance_;
class FTRLRequest;
class FTRLRequestDefaultTypeInternal;
extern FTRLRequestDefaultTypeInternal _FTRLRequest_default_instance_;
class FTRLResult;
class FTRLResultDefaultTypeInternal;
extern FTRLResultDefaultTypeInternal _FTRLResult_default_instance_;
}  // namespace ftrl
PROTOBUF_NAMESPACE_OPEN
template<> ::ftrl::FTRLFeedback* Arena::CreateMaybeMessage<::ftrl::FTRLFeedback>(Arena*);
template<> ::ftrl::FTRLRequest* Arena::CreateMaybeMessage<::ftrl::FTRLRequest>(Arena*);
template<> ::ftrl::FTRLResult* Arena::CreateMaybeMessage<::ftrl::FTRLResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ftrl {

// ===================================================================

class FTRLRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ftrl.FTRLRequest) */ {
 public:
  FTRLRequest();
  virtual ~FTRLRequest();

  FTRLRequest(const FTRLRequest& from);
  FTRLRequest(FTRLRequest&& from) noexcept
    : FTRLRequest() {
    *this = ::std::move(from);
  }

  inline FTRLRequest& operator=(const FTRLRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FTRLRequest& operator=(FTRLRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FTRLRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FTRLRequest* internal_default_instance() {
    return reinterpret_cast<const FTRLRequest*>(
               &_FTRLRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FTRLRequest* other);
  friend void swap(FTRLRequest& a, FTRLRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FTRLRequest* New() const final {
    return CreateMaybeMessage<FTRLRequest>(nullptr);
  }

  FTRLRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FTRLRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FTRLRequest& from);
  void MergeFrom(const FTRLRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FTRLRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ftrl.FTRLRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ftrl_2eproto);
    return ::descriptor_table_ftrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:ftrl.FTRLRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ftrl_2eproto;
};
// -------------------------------------------------------------------

class FTRLResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ftrl.FTRLResult) */ {
 public:
  FTRLResult();
  virtual ~FTRLResult();

  FTRLResult(const FTRLResult& from);
  FTRLResult(FTRLResult&& from) noexcept
    : FTRLResult() {
    *this = ::std::move(from);
  }

  inline FTRLResult& operator=(const FTRLResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline FTRLResult& operator=(FTRLResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FTRLResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FTRLResult* internal_default_instance() {
    return reinterpret_cast<const FTRLResult*>(
               &_FTRLResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FTRLResult* other);
  friend void swap(FTRLResult& a, FTRLResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FTRLResult* New() const final {
    return CreateMaybeMessage<FTRLResult>(nullptr);
  }

  FTRLResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FTRLResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FTRLResult& from);
  void MergeFrom(const FTRLResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FTRLResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ftrl.FTRLResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ftrl_2eproto);
    return ::descriptor_table_ftrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 ad_id = 1;
  void clear_ad_id();
  static const int kAdIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 ad_id() const;
  void set_ad_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:ftrl.FTRLResult)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 ad_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ftrl_2eproto;
};
// -------------------------------------------------------------------

class FTRLFeedback :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ftrl.FTRLFeedback) */ {
 public:
  FTRLFeedback();
  virtual ~FTRLFeedback();

  FTRLFeedback(const FTRLFeedback& from);
  FTRLFeedback(FTRLFeedback&& from) noexcept
    : FTRLFeedback() {
    *this = ::std::move(from);
  }

  inline FTRLFeedback& operator=(const FTRLFeedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline FTRLFeedback& operator=(FTRLFeedback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FTRLFeedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FTRLFeedback* internal_default_instance() {
    return reinterpret_cast<const FTRLFeedback*>(
               &_FTRLFeedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FTRLFeedback* other);
  friend void swap(FTRLFeedback& a, FTRLFeedback& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FTRLFeedback* New() const final {
    return CreateMaybeMessage<FTRLFeedback>(nullptr);
  }

  FTRLFeedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FTRLFeedback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FTRLFeedback& from);
  void MergeFrom(const FTRLFeedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FTRLFeedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ftrl.FTRLFeedback";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ftrl_2eproto);
    return ::descriptor_table_ftrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 ad_id = 2;
  void clear_ad_id();
  static const int kAdIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 ad_id() const;
  void set_ad_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool feedback = 3;
  void clear_feedback();
  static const int kFeedbackFieldNumber = 3;
  bool feedback() const;
  void set_feedback(bool value);

  // @@protoc_insertion_point(class_scope:ftrl.FTRLFeedback)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 ad_id_;
  bool feedback_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ftrl_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FTRLRequest

// int64 user_id = 1;
inline void FTRLRequest::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FTRLRequest::user_id() const {
  // @@protoc_insertion_point(field_get:ftrl.FTRLRequest.user_id)
  return user_id_;
}
inline void FTRLRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ftrl.FTRLRequest.user_id)
}

// -------------------------------------------------------------------

// FTRLResult

// int64 ad_id = 1;
inline void FTRLResult::clear_ad_id() {
  ad_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FTRLResult::ad_id() const {
  // @@protoc_insertion_point(field_get:ftrl.FTRLResult.ad_id)
  return ad_id_;
}
inline void FTRLResult::set_ad_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ad_id_ = value;
  // @@protoc_insertion_point(field_set:ftrl.FTRLResult.ad_id)
}

// -------------------------------------------------------------------

// FTRLFeedback

// int64 user_id = 1;
inline void FTRLFeedback::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FTRLFeedback::user_id() const {
  // @@protoc_insertion_point(field_get:ftrl.FTRLFeedback.user_id)
  return user_id_;
}
inline void FTRLFeedback::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ftrl.FTRLFeedback.user_id)
}

// int64 ad_id = 2;
inline void FTRLFeedback::clear_ad_id() {
  ad_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FTRLFeedback::ad_id() const {
  // @@protoc_insertion_point(field_get:ftrl.FTRLFeedback.ad_id)
  return ad_id_;
}
inline void FTRLFeedback::set_ad_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ad_id_ = value;
  // @@protoc_insertion_point(field_set:ftrl.FTRLFeedback.ad_id)
}

// bool feedback = 3;
inline void FTRLFeedback::clear_feedback() {
  feedback_ = false;
}
inline bool FTRLFeedback::feedback() const {
  // @@protoc_insertion_point(field_get:ftrl.FTRLFeedback.feedback)
  return feedback_;
}
inline void FTRLFeedback::set_feedback(bool value) {
  
  feedback_ = value;
  // @@protoc_insertion_point(field_set:ftrl.FTRLFeedback.feedback)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ftrl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ftrl_2eproto
