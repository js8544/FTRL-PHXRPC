/* advertisement_tool_impl.cpp

 Generated by phxrpc_pb2tool from ftrl.proto

*/

#include "advertisement_tool_impl.h"

#include "advertisement_client.h"

#include "phxrpc/file.h"


using namespace phxrpc;
using namespace std;


AdvertisementToolImpl::AdvertisementToolImpl() {
}

AdvertisementToolImpl::~AdvertisementToolImpl() {
}

int AdvertisementToolImpl::PHXEcho(phxrpc::OptMap &opt_map) {
    google::protobuf::StringValue req;
    google::protobuf::StringValue resp;

    if (nullptr == opt_map.Get('s')) return -1;

    req.set_value(opt_map.Get('s'));

    AdvertisementClient client;
    int ret{client.PHXEcho(req, &resp)};
    printf("%s return %d\n", __func__, ret);
    printf("resp: {\n%s}\n", resp.DebugString().c_str());

    return ret;
}

int AdvertisementToolImpl::Advertisement(phxrpc::OptMap &opt_map) {
    ftrl::AdvertisementRequest req;
    ftrl::AdvertisementResult resp;

    // TODO: fill req from opt_map

    AdvertisementClient client;
    int ret{client.Advertisement(req, &resp)};
    printf("%s return %d\n", __func__, ret);
    printf("resp: {\n%s}\n", resp.DebugString().c_str());

    return ret;
}

int AdvertisementToolImpl::Feedback(phxrpc::OptMap &opt_map) {
    ftrl::AdvertisementFeedback req;
    google::protobuf::Empty resp;

    // TODO: fill req from opt_map

    AdvertisementClient client;
    int ret{client.Feedback(req, &resp)};
    printf("%s return %d\n", __func__, ret);
    printf("resp: {\n%s}\n", resp.DebugString().c_str());

    return ret;
}

